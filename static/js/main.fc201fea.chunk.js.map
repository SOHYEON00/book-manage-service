{"version":3,"sources":["modules/types.ts","modules/reducers/book_reducer.ts","modules/reducers/user_reducer.ts","modules/reducers/search_reducer.ts","modules/reducers/index.ts","components/Auth.tsx","components/BookListItem.tsx","modal_portal/AddBookModal.tsx","components/ApiBookListItem.tsx","fBase.js","modules/api.ts","components/Pagination.tsx","styleComponent.ts","components/ApiBookList.tsx","components/BookList.tsx","components/Searchbar.tsx","components/MainComponent.tsx","components/AppRouter.tsx","App.tsx","modules/sagas/BookSaga.ts","modules/sagas/UserSaga.ts","modules/sagas/index.ts","index.tsx"],"names":["GET_LIST_DB_REQUEST","GET_LIST_DB_SUCCESS","GET_LIST_DB_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","SET_TEXT_REQUEST","SET_TEXT_FAIL","ADD_BOOK_REQUEST","ADD_BOOK_FAIL","UPDATE_BOOK_RENT_REQUEST","UPDATE_BOOK_RENT_FAIL","initialState","books","userObj","error","text","rootReducer","combineReducers","bookReducer","state","action","type","types","payload","userReducer","searchReducer","Auth","props","dispatch","useDispatch","onClick","name","BookListItem","bookItem","useSelector","toggleRentBookClick","e","buttonName","currentTarget","isRent","window","confirm","title","today","Date","month","getMonth","day","getDate","borrowDate","getFullYear","rentInfo","rowNumber","borrower","borrow_date","alert","open","url","src","thumbnail","alt","className","authors","publisher","isEbook","user","Button","variant","chkBorrower","ModalComponent","rootModal","document","getElementById","book","modalHandler","useState","setTitle","toString","setAuthors","setPublisher","price","setPrice","setUrl","onChangeValue","event","target","value","parseInt","renderModalContent","Modal","Dialog","Header","closeButton","onSubmit","preventDefault","isbn","Form","Label","onChange","ReactDOM","createPortal","ApiBookListItem","modalOpen","setModalOpen","prev","status","JSON","stringify","authInstance","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","authService","auth","init","process","addBookSheet","data","a","Promise","resolve","reject","gapi","client","then","params","spreadsheetId","range","valueInputOption","insertDataOption","valueRangeBody","sheets","spreadsheets","values","append","res","result","catch","err","console","log","getGoogleSheetsData","load","ranges","includeGridData","get","updateBookRentInfo","strRange","update","googleLogin","googleProvider","GoogleAuthProvider","signInWithPopup","userResponse","additionalUserInfo","displayName","uid","email","isLoggin","getApiBookList","currentPage","axios","size","page","query","sort","headers","Authorization","PaginationComponent","prop","endPage","onClickEvent","pageBoxList","setPageBoxList","continueEndPageBox","page1","page2","array","from","to","i","push","pageNum","useEffect","arr","firstPage","tempList","current","continueMiddlePageBox","makePageBoxList","Pagination","map","item","index","active","Item","id","mainStyle","padding","backgroundColor","titleStyle","fontSize","color","navStyle","marginTop","marginBottom","searchInputTextStyle","width","marginRight","btnStyle","borderColor","ApiBookList","apiBookList","setApiBookList","setEndPage","setCurrentPage","posts","documents","meta","pageable_count","Math","ceil","style","Table","hover","bordered","clickedElem","parse","BookList","list","bookList","setBookList","arrToJson","properties","object","length","paramData","filtered","jsonBookList","sheetsList","bookObjectList","makeBookListData","filter","includes","slice","printPostByPage","React","memo","Searchbar","setText","onDebounceChangeValue","useCallback","_","debounce","Navbar","inline","FormControl","placeholder","MainComponent","AppRouter","isHniner","setIsHniner","undefined","emailDomain","exact","path","App","getBookListDBSaga","addBookSaga","updateBookRentSaga","watchBookSaga","rowItem","forEach","tableItem","formattedValue","call","api","sheetsDataList","rowData","put","message","takeLatest","loginUserSaga","watchLoginUser","apis","response","rootSaga","all","userSaga","fork","bookSaga","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","render","StrictMode"],"mappings":"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","file":"static/js/main.fc201fea.chunk.js","sourcesContent":["export const GET_LIST_DB_REQUEST = 'book/GET_LIST_DB_REQUEST' as const; // 요청\nexport const GET_LIST_DB_SUCCESS = 'book/GET_LIST_DB_SUCCESS' as const; // 성공\nexport const GET_LIST_DB_FAIL = 'book/GET_LIST_DB_FAIL' as const; // 실패\n\n// export const GET_USER_REQUEST = 'user/GET_USER_REQUEST';\n// export const GET_USER_SUCCESS = 'user/GET_USER_SUCCESS';\n// export const GET_USER_FAIL = 'user/GET_USER_FAIL';\n\n// export const SET_USER_DATA = 'user/SET_USER_DATA';\n// export const SET_USER_SUCCESS = 'user/SET_USER_SUCCESS';\n// export const SET_USER_FAIL = 'user/SET_USER_FAIL';\n\nexport const LOGIN_REQUEST = 'user/LOGIN_REQUEST' as const;\nexport const LOGIN_SUCCESS = 'user/LOGIN_SUCCESS' as const; \nexport const LOGIN_FAIL = 'user/LOGIN_FAIL' as const;\n\n// set search text into store\nexport const SET_TEXT_REQUEST = 'book/SET_TEXT_REQUEST' as const;\nexport const SET_TEXT_SUCCESS = 'book/SET_TEXT_SUCCESS' as const;\nexport const SET_TEXT_FAIL = 'book/SET_TEXT_FAIL' as const;\n\nexport const SEARCH_API_REQUEST = 'book/SEARCH_API_REQUEST';\nexport const SEARCH_API_SUCCESS = 'book/SEARCH_API_SUCCESS';\nexport const SEARCH_API_FAIL = 'book/SEARCH_API_FAIL';\n\n\n// google spread sheed 관련 params 변수\nexport const SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\n\nexport const ADD_BOOK_REQUEST = 'book/ADD_BOOK_REQUEST';\nexport const ADD_BOOK_SUCCESS = 'book/ADD_BOOK_SUCCESS';\nexport const ADD_BOOK_FAIL = 'book/ADD_BOOK_FAIL';\n\nexport const UPDATE_BOOK_RENT_REQUEST = 'UPDATE_BOOK_RENT_REQUEST';\nexport const UPDATE_BOOK_RENT_SUCCESS = 'UPDATE_BOOK_RENT_SUCCESS';\nexport const UPDATE_BOOK_RENT_FAIL = 'UPDATE_BOOK_RENT_FAIL';\n\nexport const MAX_PAGE = 100; // 카카오 api 최대 요청 페이지 수 \nexport const PAGE_NUMBER_ONE = 1;\nexport const PREVIEW_COUNT = 3; // 페이지넘버 리스트 프리뷰 카운트\nexport const POSTS_PER_PAGE = 5;\n\nexport const AUTH_TO_HNINE = 'AUTH_TO_HNINE';\nexport const AUTH_TO_HNINE_SUCCESS = 'AUTH_TO_HNINE_SUCCESS';\nexport const AUTH_TO_HNINE_FAIL = 'AUTH_TO_HNINE_FAIL';","import { bookListItemType } from 'propsTypes';\nimport { BookActionsTypes} from '../actions/book_action';\nimport * as types from '../types';\n\ninterface initialStateType {\n    books: Array<bookListItemType>;\n};\n\nexport const initialState:initialStateType = {\n    books: []\n};\n\nexport const bookReducer = (state=initialState, action:BookActionsTypes) => {\n    \n    switch(action.type) {\n        case types.ADD_BOOK_FAIL:\n            return {\n                ...state,\n            }\n        case types.UPDATE_BOOK_RENT_FAIL:\n            return {\n                ...state\n            }\n        case types.GET_LIST_DB_REQUEST:\n            return {\n                ...state\n            };\n        case types.GET_LIST_DB_SUCCESS:\n            return {\n                ...state,\n                books: action.payload\n            };\n        case types.GET_LIST_DB_FAIL:\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n    \n}\n","import {UserActionTypes} from '../actions/user_action';\nimport * as types from '../types';\n\n\nconst initialState = {\n    userObj: {},\n    error: ''\n};\n\nexport const userReducer = (state=initialState, action:UserActionTypes) => {\n    switch(action.type) {\n        case types.LOGIN_SUCCESS:\n            return {\n                userObj: action.payload\n            };\n        case types.LOGIN_FAIL:\n            return {\n                ...state,\n                error: action.payload\n            };\n        default: \n            return state;\n    }\n};","import {SearchActionTypes} from '../actions/search_action';\nimport * as types from '../types';\n\nexport const initialState = {\n    text: ''\n};\n\nexport const searchReducer = (state=initialState, action:SearchActionTypes) => {\n\n    switch(action.type){\n        case types.SET_TEXT_REQUEST: \n            return {\n                ...state,\n                text: action.payload\n            };\n        case types.SET_TEXT_FAIL:\n            return {\n                ...state,\n            };\n\n        default: return { ...state };\n    }\n}\n","import { combineReducers } from 'redux';\nimport {bookReducer} from './book_reducer';\nimport {userReducer} from './user_reducer';\nimport {searchReducer} from './search_reducer';\n\nconst rootReducer = combineReducers({\n    bookReducer,\n    userReducer,\n    searchReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as types from 'modules/types';\n\ninterface Props {\n    error?: string;\n};\n\nconst Auth = (props:Props) => {\n    const {error} = props; // 임직원이 아닌 경우 error\n\n    const dispatch = useDispatch();\n\n    const onGoogleClick = () => {\n        dispatch({type: types.LOGIN_REQUEST}); // 구글로그인\n    };\n\n    return (\n        <div>\n            <button onClick={onGoogleClick} name='google' >\n                Google 이메일로 로그인하기\n            </button>\n            <h4>{error}</h4>\n        </div>\n    );\n};\n\nexport default Auth;","import React from 'react';\nimport {Button} from 'react-bootstrap';\nimport {bookListItemType, bookRentType} from 'propsTypes';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'modules/reducers';\nimport * as types from 'modules/types';\n\ninterface Props {\n    bookItem: bookListItemType;\n};\n\n\nconst BookListItem = (props: Props) => {\n    const { bookItem} = props;\n    const dispatch = useDispatch();\n\n    // 현재 로그인한 유저 정보 \n    const {name} = useSelector((state:RootState) => {\n        const userReducer = state.userReducer as any;\n        return userReducer.userObj;\n    });\n    \n    // 해당 도서의 대출자와 현재 유저 비교\n    const chkBorrower = (user:string, bookItem:bookListItemType) => {\n        if(bookItem.borrower === name) {\n            return <Button variant=\"danger\" onClick={toggleRentBookClick} name=\"반납\">반납</Button>\n        } else {\n            return <p>{bookItem.borrower} - {bookItem.borrow_date}</p>\n        }\n    };\n\n\n    // 대출/반납 버튼\n    // click event를 발생시킨 버튼의 name에 따라 동작\n    const toggleRentBookClick = (e:React.MouseEvent<HTMLInputElement>) => {\n        const buttonName = e.currentTarget.name;\n        const isRent = (buttonName==='대출') ? true : false; // 버튼 타입 구별 true:대출, false:반납\n       \n        const result = window.confirm(`${bookItem.title} 을/를 ${buttonName}하시겠습니까?`);\n\n        if(result) { // 대출or반납 선택\n            const today = new Date();\n            const month = (today.getMonth()+1 < 10) ? `0${today.getMonth()+1}` : `${today.getMonth()+1}`;\n            const day = (today.getDate() < 10) ? `0${today.getDate()}` : `${today.getDate()}`;\n            \n            const borrowDate = `${today.getFullYear()}-${month}-${day}`;\n            \n            // 시트 내용 update parameter\n            const rentInfo:bookRentType = {\n                rowNumber: bookItem.rowNumber,\n                borrower: isRent? name : 'null',\n                borrow_date: isRent? borrowDate : 'null',\n                isRent: isRent\n            };\n\n            //시트 내용 update action\n            dispatch({ type: types.UPDATE_BOOK_RENT_REQUEST, payload: rentInfo}); \n            \n            alert(`${buttonName}이 완료되었습니다.`);\n        } else { \n            alert(`${buttonName}이 취소되었습니다.`);\n        }\n    };\n    \n\n    return(\n        <tr>\n           <td onClick={() => {window.open(bookItem.url)}}>\n                    <img src={bookItem.thumbnail} alt='도서 표지'/>\n                </td>\n                <td className=\"align-middle\">{bookItem.title}</td>\n                <td className=\"align-middle\">{bookItem.authors}</td>\n                <td className=\"align-middle\"> {bookItem.publisher}</td>\n                <td className=\"align-middle\">{bookItem.isEbook ? 'Ebook' : '출판도서'}</td>\n                <td className=\"align-middle\">\n                    {!bookItem.isRent \n                        ? <Button onClick={toggleRentBookClick} name=\"대출\">대출가능</Button> \n                        : chkBorrower(name, bookItem)\n                    }\n                </td>\n            \n        </tr>\n    );\n};\n\nexport default BookListItem;\n\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { apiBookItemType } from 'propsTypes';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport * as types from 'modules/types';\nimport { useDispatch } from 'react-redux';\n\ninterface Props {\n    book: apiBookItemType;\n    modalHandler: any;\n};  \n\nconst ModalComponent = (props:Props) =>  {\n    // react portal 사용\n    const rootModal = document.getElementById('root-modal') as Element;\n    const dispatch = useDispatch();\n\n    // book item 정보\n    const {book, modalHandler} = props;\n    const [title, setTitle] = useState(book.title);\n    const [authors, setAuthors] = useState((book.authors).toString());\n    const [publisher, setPublisher] = useState(book.publisher);\n    const [price, setPrice] = useState(book.price);\n    const [url, setUrl] = useState(book.url);\n\n    const onChangeValue = (event:React.ChangeEvent<HTMLInputElement>) => {\n        const {value, name} = event.target;\n\n        switch(name) {\n            case 'title':\n                return setTitle(value);\n            case 'authors':\n                return setAuthors(value.toString());\n            case 'publisher':\n                return setPublisher(value);\n            case 'price':\n                return setPrice(parseInt(value));\n            case 'url':\n                return setUrl(value);\n        };\n    };\n\n    const onAddBookSubmit = (event:React.ChangeEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const isbn = book.isbn;\n        const thumbnail = book.thumbnail;\n\n        const newBook = [title, publisher, authors, thumbnail, url, 'null', 'null', 'FALSE', 'FALSE', isbn];\n        dispatch({ type: types.ADD_BOOK_REQUEST, payload:newBook}); // 도서 추가 api dispatch\n        modalHandler(); // close modal\n    };\n\n\n    const renderModalContent = \n    <div className=\"modalContainer\">\n        \n    <Modal.Dialog className=\"modalDiv\">\n        <Modal.Header closeButton onClick={modalHandler}>\n            <h4>Add New Book Form</h4>\n        </Modal.Header>\n        <form onSubmit={onAddBookSubmit}>\n            <img src={book.thumbnail} alt=\"thumnail img\"/>\n            <Form.Label>책 제목</Form.Label><input type=\"text\" value={title} name=\"title\" onChange={onChangeValue}/>\n            <Form.Label>저자</Form.Label><input type=\"text\" value={authors} name=\"authors\" onChange={onChangeValue}/>\n            <Form.Label>출판사</Form.Label><input type=\"text\" value={publisher} name=\"publisher\" onChange={onChangeValue}/>\n            <Form.Label>가격</Form.Label><input type=\"number\" value={price} name=\"price\" onChange={onChangeValue}/>\n            <Form.Label>Url</Form.Label><input type=\"text\" value={url} name=\"url\" onChange={onChangeValue} />\n            <Button variant=\"primary\" type=\"submit\">도서 추가</Button>\n        </form>\n    </Modal.Dialog></div>\n    ;\n\n    return ReactDOM.createPortal(renderModalContent, rootModal);\n}\n\nexport default ModalComponent;","import React, {useState} from 'react';\nimport {apiBookItemType} from 'propsTypes';\nimport { Button } from 'react-bootstrap';\nimport ModalComponent from 'modal_portal/AddBookModal';\n\ninterface Props {\n    book: apiBookItemType;\n};\n\nconst ApiBookListItem = (props:Props) => {\n    const {book} = props;\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const modalHandler = () => {\n        setModalOpen(prev => !prev);\n    };\n\n    return (\n        <>\n            {modalOpen && \n                <ModalComponent book={book} modalHandler={modalHandler}/>\n            }\n \n            <tr>\n                <td onClick={() => {window.open(book.url)}}>\n                    <img src={book.thumbnail} alt='도서 표지'/>\n                </td>\n                <td className=\"align-middle\">{book.title}</td>\n                <td className=\"align-middle\">{book.authors}</td>\n                <td className=\"align-middle\">{book.publisher}</td>\n                <td className=\"align-middle\">{book.isEbook ? 'Ebook' : '출판도서'}</td>\n                <td className=\"align-middle\">{book.status}</td>\n                <td className=\"align-middle\">{book.price}</td>\n                <td className=\"align-middle\"><Button onClick={modalHandler} value={JSON.stringify(book)}>도서 추가</Button></td>\n            </tr> \n        </>\n    );\n};\n\nexport default ApiBookListItem;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// const firebase = require('firebase');\n// require('firebase/firestore');\n\n// initialize cloud firestore\nconst firebaseConfig = ({\n    apiKey: \"AIzaSyApwNDBtMuLCeVLIrIuKHEA8rXHNzSaZM8\",\n    authDomain: \"book-management-95041.firebaseapp.com\",\n    projectId: \"book-management-95041\",\n    storageBucket: \"book-management-95041.appspot.com\",\n    messagingSenderId: \"385551841011\",\n    appId: \"1:385551841011:web:4ab782c1fef95095afa986\"\n});\n\n// initialize firebase\nexport default firebase.initializeApp(firebaseConfig);\n\n// db service\nexport const dbService = firebase.firestore();\n\n// auth service (google provider)\nexport const authInstance = firebase;\nexport const authService = firebase.auth();","import axios from \"axios\";\nimport { authInstance, authService } from \"fBase\";\nimport * as types from 'modules/types';\nimport { bookRentType } from \"propsTypes\";\n\n\nconst init = {\n    'apiKey': process.env.REACT_APP_GOOGLE_API_KEY,\n    'clientId': process.env.REACT_APP_CLIENT_ID,\n    'scope': types.SCOPE,\n    'discoveryDocs':['https://sheets.googleapis.com/$discovery/rest?version=v4']\n};\n\nexport const addBookSheet = async(data:any) => {\n    return await new Promise((resolve, reject) => {\n        gapi.client.init(init)\n            .then(async() => {\n                const params = {\n                    spreadsheetId: process.env.REACT_APP_BOOK_SPREADSHEET_ID || \"\",\n                    range: 'A1:J1',\n                    valueInputOption: \"RAW\",\n                    insertDataOption: 'INSERT_ROWS',\n                };\n                const valueRangeBody = {\n                    \"values\": [data.payload]\n                };\n                await gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody)\n                    .then((res) => {\n                        resolve(res.result);\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                    });\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n};\n\n\n // client.init으로 client 인증 -> sheets 정보 GET\nexport const getGoogleSheetsData = async() => {\n    let spreadSheet:string = process.env.REACT_APP_BOOK_SPREADSHEET_ID || '';\n    // 성공 시, promise의 resolve()를 리턴\n    return await new Promise((resolve, reject) => {\n       \n        gapi.load('client:auth2', () => {\n            try {\n                const params = {\n                    spreadsheetId: spreadSheet || '',\n                    ranges: [],\n                    includeGridData: true\n                };\n                // google auth init \n               gapi.client.init(init).then(async() => {\n                   // get sheets data\n                    await gapi.client.sheets.spreadsheets.get(params)\n                        .then((res) => {  \n                            resolve(res.result.sheets); // 요청 성공\n                        })\n                        .catch((err) => {console.log(err);});\n               }).catch((err) => {console.log(err);})\n            }\n            catch(err) {\n                console.log(err);\n                reject(err); // 요청 실패\n            }\n        })\n    })\n};\n\nexport const updateBookRentInfo = async(data:bookRentType) => {\n    return await new Promise((resolve, reject) => {\n        gapi.client.init(init)\n            .then(async() => {\n                const strRange = `F${data.rowNumber}:H${data.rowNumber}`;\n\n                const params = {\n                    spreadsheetId: process.env.REACT_APP_BOOK_SPREADSHEET_ID || \"\",\n                    range: strRange,\n                    valueInputOption: \"RAW\"\n                };\n                const valueRangeBody = {\n                    \"majorDimension\": \"ROWS\",\n                    \"values\": [\n                        [data.borrower, data.borrow_date, data.isRent]\n                    ],\n                    \"range\": strRange,\n                };\n                \n                await gapi.client.sheets.spreadsheets.values.update(params, valueRangeBody)\n                    .then((res) => {\n                        resolve(res.result);\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                        reject(err);\n                    })\n            })\n    })\n}\n\n\n// firebase를 이용한 구글 로그인 기능\nexport const googleLogin = async() => {\n    const googleProvider = new authInstance.auth.GoogleAuthProvider();\n    const userResponse = await authService.signInWithPopup(googleProvider);\n    \n    // 값이 있는 경우만 처리\n    if(userResponse.user && userResponse.additionalUserInfo) {\n        const userObj = {\n            name: userResponse.user.displayName,\n            uid: userResponse.user.uid,\n            email: userResponse.user.email,\n            isLoggin: true\n        };\n        return userObj;\n    } \n    else {\n        return 'nothing';\n    }\n    \n};\n    \n// 카카오 오픈 api 요청\nexport const getApiBookList = async(text:string, currentPage:number) => {\n\n    // api request 결과: 도서 리스트\n    return await axios.get('https://dapi.kakao.com/v3/search/book', {\n        params: {\n            size: 5,\n            page: currentPage,\n            target: 'title', \n            query: text,\n            sort: 'recency'\n        },\n        headers: {\n            Authorization: process.env.REACT_APP_KAKAO_API_AUTH,\n        }\n        })\n        .then((res) => {return res.data})\n        .catch((err) => {return err})\n}; \n\n\n","import { PAGE_NUMBER_ONE } from 'modules/types';\nimport React, { useEffect, useState } from 'react';\nimport { Pagination } from 'react-bootstrap';\n\ninterface Props {\n    endPage: number;\n    currentPage: number;\n    onClickEvent: any;\n};\n\ninterface pageBoxType {\n    pageNum: number;\n    type: string; // page, prev, next\n};\n\n\nconst PaginationComponent = (prop:Props) => {\n    const {endPage, currentPage, onClickEvent} = prop; // end page number\n    const [pageBoxList, setPageBoxList] = useState<Array<pageBoxType>>([]);\n\n     // 현제 페이지 위치와 앞,뒤 2개의 페이지 출력 ex) ...4,5,6,7,8...\n    const continueMiddlePageBox = (current:number, array:Array<pageBoxType>) => {\n        for(let i=current-2; i<=current+2; i++) {\n            array.push({ pageNum: i, type: 'page'});\n        }\n        return array; // 리턴: 배열값\n    };\n    \n\n    // 현재 페이지위치가 맨 끝(처음, 마지막) 포함 2개일 때 (1,2,3 or 마지막페이지-2 ~ 마지막페이지)\n    const continueEndPageBox = (page1:number, page2:number, array:Array<pageBoxType>) => {\n        let from;\n        let to;\n\n        // for문 시작, 마지막 지점 정하기 위한 조건문\n        if(page1 <= page2) {\n            from = page1;\n            to = page2;\n        } else {\n            from = page2;\n            to = page1;\n        }\n\n        if(from <= 10) { // 총 페이지 넘버가 10이 넘지 않는 경우, 1~10까지 전체 출력\n            from = PAGE_NUMBER_ONE;\n        }\n\n        for(let i=from; i<=to; i++) {\n            array.push({ pageNum: i, type: 'page'});\n        }\n        return array; // 리턴: 배열값\n    };\n\n    useEffect(() => {\n        // 페이지박스 리스트 반환\n        const makePageBoxList = (firstPage:number, currentPage:number, endPage:number) => {\n            let tempList:Array<pageBoxType> = [];\n\n            // api 결과값이 없는 경우 (endPage === 0)\n            if(endPage === 0) {\n                tempList = [];\n            }\n\n            // 현재 페이지 위치:1 ~ 3  \n            else if(currentPage <= firstPage + 2)  {\n                continueEndPageBox(firstPage, firstPage+3, tempList);\n                tempList.push({ pageNum: 0, type: 'next'});\n                tempList.push({ pageNum: endPage, type: 'page'});\n            } \n            \n            // 현재 페이지 위치: 마지막 3개 (endPage-2 ~ endPage)\n            else if(currentPage >= endPage - 2) {\n                tempList.push({ pageNum: firstPage, type: 'page'});\n                tempList.push({ pageNum: 0, type: 'prev'});\n                continueEndPageBox(endPage-3, endPage, tempList);\n            } \n            // 그 외의 범위\n            else {\n                tempList.push({ pageNum: firstPage, type: 'page'});\n                tempList.push({ pageNum: 0, type: 'prev'});\n                continueMiddlePageBox(currentPage, tempList);\n                tempList.push({ pageNum: 0, type: 'next'});\n                tempList.push({ pageNum: endPage, type: 'page'});\n            }\n            return tempList;\n\n        };\n\n\n        // 페이지네이션 출력\n        if(endPage <= 5) { // 최대 페이지가 5개인 경우: 1~5까지 모두 출력\n            const arr = continueEndPageBox(currentPage, endPage, []);\n            setPageBoxList(arr);\n        }\n        else {\n            setPageBoxList(makePageBoxList(PAGE_NUMBER_ONE, currentPage, endPage));\n        }\n    }, [currentPage, endPage]);\n\n\n    return (\n        <section className=\"pagenationSection\">\n            <Pagination>\n                {pageBoxList.map((item:pageBoxType, index) => {\n                    const active = (item.pageNum === currentPage) ? true : false;\n                        if(item.type === 'page') {\n                            return ( \n                                <Pagination.Item onClick={onClickEvent} active={active} key={`${item}/${index}`} id={JSON.stringify(item)}>\n                                    {item.pageNum}\n                                </Pagination.Item>\n                            )\n                        } else {\n                            return (\n                                <Pagination.Item onClick={onClickEvent} active={active} key={`${item}/${index}`} id={JSON.stringify(item)}>\n                                    ...\n                                </Pagination.Item>\n                        );\n                    }\n                })}\n            </Pagination>\n        </section>\n    );    \n};\n\nexport default PaginationComponent;","export const mainStyle = {\n    padding: '6rem 3rem',\n    backgroundColor: '#f0f2f5',\n};\n\nexport const titleStyle = {\n    fontSize: '1.4rem',\n    color: '#4b5258'\n};\n\nexport const errorStyle = {\n    color: 'red'\n}\n\nexport const navStyle = {\n    padding: 0,\n    marginTop: '3rem',\n    marginBottom: '1rem'\n};\n\n\nexport const searchInputTextStyle = {\n    width: '15rem',\n    marginRight: '1rem',\n};\n\nexport const btnStyle = {\n    backgroundColor: '#fff',\n    borderColor: '#ced4da',\n};\n\nexport const tdStyle = {\n    border: 'none',\n};\n\n","import React, { useEffect, useState } from 'react';\nimport {useSelector } from 'react-redux';\nimport { Table } from 'react-bootstrap';\nimport ApiBookListItem from 'components/ApiBookListItem';\nimport {apiBookItemType} from 'propsTypes';\nimport { RootState } from 'modules/reducers';\nimport {getApiBookList} from 'modules/api';\nimport PaginationComponent from './Pagination';\nimport {PAGE_NUMBER_ONE, MAX_PAGE, PREVIEW_COUNT} from 'modules/types';\nimport { titleStyle } from 'styleComponent';\n\n\nconst ApiBookList = () => {\n    const text = useSelector((state:RootState) => state.searchReducer.text);\n\n    const [apiBookList, setApiBookList] = useState([]);\n    const [endPage, setEndPage] = useState(PAGE_NUMBER_ONE); // 마지막 페이지\n    const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 넘버\n\n    // 마지막 페이지 계산\n    const calEndPage = (posts:number) => {\n        const postPerPage = 5;\n\n        // 최대 요청 페이지 수를 넘을 경우\n        return Math.ceil(posts / postPerPage) > MAX_PAGE ? MAX_PAGE : Math.ceil(posts/postPerPage) ;\n    };\n\n    useEffect(() => {\n        // 카카오 api 요청 -> api로 받은 도서 리스트, 마지막 페이지 set\n        const requestApiBookList = () => {\n            const apiResponse = getApiBookList(text, currentPage); // promise 반환\n            apiResponse\n                .then((result) => { // { documents: 도서리스트, meta }\n                    setApiBookList(result.documents);\n                    setEndPage(calEndPage(result.meta.pageable_count));\n                })\n                .catch((err) => console.log(err));\n        };\n\n        // 검색어 값이 있는 경우 -> api 요청\n        if(text !== '') {\n            requestApiBookList();\n        } else { // 검색어 값이 없는 경우 -> 초기화\n            setApiBookList([]);\n            setEndPage(PAGE_NUMBER_ONE); \n            setCurrentPage(PAGE_NUMBER_ONE);\n        }\n    }, [text, currentPage]);\n\n    const onClickPageBox = (e:React.ChangeEvent<HTMLInputElement>) => {\n        const { id } = e.target;\n        const clickedElem = JSON.parse(id);\n\n        // 클릭된 페이지박스 타입별 동작\n        if(clickedElem.type === 'page') {\n            setCurrentPage(clickedElem.pageNum);\n        } else if(clickedElem.type === 'next') {\n            setCurrentPage(currentPage + PREVIEW_COUNT);\n        } else if(clickedElem.type === 'prev') {\n            setCurrentPage(currentPage - PREVIEW_COUNT);\n        } else { // 예외\n            setCurrentPage(currentPage);\n        }\n        \n    };\n\n    return (\n        <section>\n            <p style={titleStyle}>카카오 도서 검색 결과</p>\n            <Table hover bordered className=\"table\">\n                <thead>\n                    <tr>\n                        <th>도서 표지</th>\n                        <th>도서 제목</th>\n                        <th>저자</th>\n                        <th>출판사</th>\n                        <th>도서 형태</th>\n                        <th>판매상황</th>\n                        <th>가격</th>\n                        <th>추가하기</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {apiBookList && apiBookList.map((item:apiBookItemType) => {\n                        // 도서 형태에 대한 정보가 없는 경우 isEbook = false로 초기화\n                        if(!item.isEbook) {\n                            item.isEbook = false;\n                        }\n                            \n                        \n                        return (\n                            <ApiBookListItem\n                                book={item}\n                                key={`${item.title}/${item.isbn}`}\n                            />\n                        )\n                    })}\n                </tbody>\n            </Table>\n\n            <PaginationComponent endPage={endPage} currentPage={currentPage} onClickEvent={onClickPageBox}/>\n        </section>\n    )\n};\n\nexport default ApiBookList;","import React, { useEffect, useState } from 'react';\nimport BookListItem from 'components/BookListItem';\nimport Table from 'react-bootstrap/Table';\nimport ApiBookList from 'components/ApiBookList';\nimport { useSelector } from 'react-redux';\nimport {bookListItemType} from 'propsTypes';\nimport { RootState } from 'modules/reducers';\n\nimport {titleStyle} from 'styleComponent';\nimport PaginationComponent from './Pagination';\nimport {PAGE_NUMBER_ONE, PREVIEW_COUNT, POSTS_PER_PAGE} from 'modules/types';\n\n\nconst BookList = () => {\n    const text = useSelector((state:RootState) => state.searchReducer.text);\n    const list = useSelector((state:RootState) => state.bookReducer.books);\n\n    const [bookList, setBookList] = useState(list);\n    const [endPage, setEndPage] = useState(PAGE_NUMBER_ONE); // 마지막 페이지\n    const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 넘버\n\n    const onClickPageBox = (e:React.MouseEvent<HTMLInputElement>) => {\n        const { id } = e.currentTarget;\n        const clickedElem = JSON.parse(id); // 페이지네이션 > 페이지박스 타입\n\n        // 클릭된 페이지박스 타입별 동작\n        if(clickedElem.type === 'page') {\n            setCurrentPage(clickedElem.pageNum);\n        } else if(clickedElem.type === 'next') {\n            setCurrentPage(currentPage + PREVIEW_COUNT);\n        } else if(clickedElem.type === 'prev') {\n            setCurrentPage(currentPage - PREVIEW_COUNT);\n        } else { // 예외\n            setCurrentPage(currentPage);\n        }\n    };\n\n    // 페이지 당 출력할 도서 리스트\n    const printPostByPage = (page:number, list:any) => {\n        return list.slice(POSTS_PER_PAGE*(page-1), POSTS_PER_PAGE*page);\n    };\n\n    // 마지막 페이지 넘버 계산\n    const calEndPage = (posts:number) => {\n        return Math.ceil(posts / POSTS_PER_PAGE);\n    };\n\n    // 프로퍼티: 도서 데이터 형식의 도서 object 반환\n    const arrToJson = (arr:Array<string>, properties:Array<string>) => {\n        let object:any = {};\n        \n        for(let i=0; i<properties.length; i++) {\n            let paramData;\n            if(arr[i] === 'TRUE') {\n                paramData = true;\n            } else if(arr[i] === 'FALSE') {\n                paramData = false;\n            } else {\n                paramData = arr[i];\n            }\n            object[properties[i]] = paramData;\n            \n        } \n        return object;\n    };\n\n    useEffect(() => {\n        // 실제 출력에 사용될 도서 object 배열 반환\n        const makeBookListData = (sheetsList:any) => {\n            let bookObjectList = []; \n        \n                for(let i=1; i<sheetsList.length; i++){\n                    const properties = sheetsList[0]; // 도서 프로퍼티 리스트\n                    \n                    // 모든 '열'에 값이 들어있는 경우만 처리\n                    if(sheetsList[i].length === properties.length) {\n                        let object = arrToJson(sheetsList[i], properties); \n\n                        object.rowNumber = i+1; // update를 위해 rowNumber 프로퍼티 추가\n                        bookObjectList.push(object); \n                    }\n                };\n            return bookObjectList;\n        };\n\n        const jsonBookList = makeBookListData(list); // array -> object로 변환한 도서 리스트\n\n        let filtered;\n        if(text !== ''){ // 검색어 있는 경우, 검색어가 title로 포함된 도서만 반환\n\n            // 검색어가 변했을 때, 1페이지로 currentPage 변경\n            if(currentPage > endPage) {\n                setCurrentPage(PAGE_NUMBER_ONE);\n            }\n            // 검색어가 포함된 책 제목을 가지는 도서 필터\n            filtered = jsonBookList.filter((bookItem:any) => {\n                return bookItem.title.includes(text);\n            });\n\n        } else { // 검색어 없는 경우, 모든 도서 출력\n            filtered = jsonBookList;\n        }\n\n        setEndPage(calEndPage(filtered.length)); // 마지막 페이지 계산\n        setBookList(printPostByPage(currentPage, filtered)); //페이지 별, 도서 리스트 출력\n    }, [text, list, currentPage, endPage]); \n\n    return (\n        <>\n        <section>\n            <p style={titleStyle}>HNINE 도서 리스트</p>\n            <Table hover bordered className=\"table\">\n                <thead>\n                    <tr>\n                        <th>도서 표지</th>\n                        <th>도서 제목</th>\n                        <th>저자</th>\n                        <th>출판사</th>\n                        <th>도서 형태</th>\n                        <th>대출 현황</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                {bookList && bookList.map((item:bookListItemType) => { \n                    return (\n                        <BookListItem \n                            key={`${item.title}/${item.isbn}`}\n                            bookItem={item}\n                        />\n                    )\n                })}\n                </tbody>  \n            </Table>\n\n            <PaginationComponent endPage={endPage} currentPage={currentPage} onClickEvent={onClickPageBox} />\n\n        </section>\n        <hr />\n        <ApiBookList />\n        </>\n    );\n};\n\nexport default React.memo(BookList);","import React, { useCallback, useState } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { Button, FormControl, Form } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport * as types from 'modules/types';\nimport {searchInputTextStyle, btnStyle, navStyle} from 'styleComponent';\nimport _ from 'lodash';\n\n\nconst Searchbar = () => {\n    const [text, setText] = useState<string>('');\n    const dispatch = useDispatch();\n\n    // 검색어 onChangeHandler\n    const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n        setText(value);\n        onDebounceChangeValue(value); // 검색어 디바운싱: 입력이 멈춘 후 800ms이 지난 후 dispatch 동작\n    };\n\n    // (1)store에 검색어 저장(엔터or버튼 누르지 않은 경우)\n    const onDebounceChangeValue = useCallback(\n        _.debounce((value: string) => {\n            dispatch({type: types.SET_TEXT_REQUEST, payload: value});\n    }, 800),[]);\n\n    \n    // (2)store에 검색어 저장(엔터or버튼 누른 경우)\n    const onSubmitText = (event:React.FormEvent)=> {\n        event.preventDefault();\n        dispatch({type: types.SET_TEXT_REQUEST, payload: text}); \n    }\n\n    return(\n        <Navbar style={navStyle}>\n            <Form inline onSubmit={onSubmitText}>\n                <FormControl placeholder='책 제목' type='text' value={text} onChange={onChangeValue} style={searchInputTextStyle}/>\n                <Button style={btnStyle} variant=\"outline-secondary\" type=\"submit\">검색</Button>\n            </Form>\n        </Navbar>\n    );\n};\n\nexport default Searchbar;","import React, {useEffect} from 'react';\nimport BookList from './BookList';\nimport {useDispatch } from 'react-redux';\n\nimport * as types from 'modules/types';\nimport Searchbar from './Searchbar';\n\nconst MainComponent = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch({type: types.GET_LIST_DB_REQUEST}); // 전체 도서리스트 Get요청\n    }, [dispatch]);\n\n\n    return(\n        <>\n            <Searchbar />\n            <BookList />\n        </>\n    );\n};\n\nexport default MainComponent;","import React, { useEffect, useState } from 'react';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport Auth from './Auth';\nimport { userObjType } from 'propsTypes';\nimport MainComponent from './MainComponent';\n\ninterface Props {\n    userObj: userObjType;\n    error: any;\n};\n\nconst AppRouter = (props:Props) => {\n    const {userObj, error} = props;\n    const [isHniner, setIsHniner] = useState(false);\n\n    useEffect(() => {\n        if(userObj.email !== undefined) {\n            const emailDomain = (userObj.email).slice(-9);\n            (emailDomain === 'hnine.com') ? setIsHniner(true) : setIsHniner(false);\n        }\n        \n    }, [userObj]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                {userObj.isLoggin ?  // true: 로그인한 경우 false: 로그인하지 않은 경우\n                    <Route exact path='/'>\n                        {/* 임직원 여부 파악 후, 임직원이면 입장*/}\n                        { isHniner ? <MainComponent /> : <Auth error={'에이치나인 임직원이 아닙니다.'}/>}\n                    </Route>\n                    :\n                    <Route exact path='/'>\n                        <Auth />\n                        {error &&  <p>로그인에 실패하였습니다. 다시 시도해주세요.</p>} {/* 로그인에 실패한 경우 에러 메시지 출력 */}\n                    </Route>\n                }\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default AppRouter;","\nimport * as React from 'react';\nimport {useSelector} from 'react-redux';\nimport AppRouter from 'components/AppRouter';\nimport {mainStyle, titleStyle} from 'styleComponent';\nimport { RootState } from 'modules/reducers';\nimport 'style.scss';\n\n\nconst App = () => {\n  const {userObj, error} = useSelector((state:RootState) => state.userReducer);\n\n  return (\n    <>\n      <main style={mainStyle}>\n        <p style={titleStyle}>도서 관리 서비스</p>\n          <AppRouter userObj={userObj} error={error}/>\n      </main>\n    </>\n  );\n \n}\n\nexport default App;\n","import * as types from '../types';\nimport * as api from '../api';\nimport {call, put, takeLatest} from 'redux-saga/effects';\nimport {sheetsItemType, sheetsItemValueType} from 'propsTypes';\n\n// 구글 시트의 도서 리스트 GET api 호출하는 사가\nfunction* getBookListDBSaga() {\n\n    // 인자로 받은 구글 시트 데이터 중, 도서 정보가 제대로 입력된 행만 리턴\n    const makeBookListData = (sheetsList:Array<sheetsItemType>) => {\n        const filteredHasData = sheetsList.filter(e => e.values ); // 시트 값이 있는 경우만 filter\n\n        // 시트 api 응답값 중, 유의미한 데이터만 추출\n        const rowValueList = filteredHasData.map((item:sheetsItemType) => {\n            let rowItem:Array<string> = [];\n\n                item.values.forEach((tableItem:sheetsItemValueType) => {\n                    if(tableItem.formattedValue) { //실제 셀에 값이 있는 경우만 처리\n                        rowItem.push(tableItem.formattedValue);\n                    }\n                });\n            return rowItem;\n        });\n        return rowValueList;\n    };\n\n    try {\n        const response:[] = yield call(api.getGoogleSheetsData);\n        \n        // 구글 시트 중, 데이터가 있는 경우 이 변수에 담기게 된다.\n        // 배열: [[title, authors, ... ], [], ...]\n        let sheetsDataList; \n\n        response.forEach((item:any) => {\n            if(item.data){ // data가 있는 경우만 출력\n                sheetsDataList = makeBookListData(item.data[0].rowData)\n            } else {\n                sheetsDataList = []; // data가 없는 경우\n            }\n        });\n\n        // 데이터가 있는 행으로 이뤄진 리스트 변수를 스토어에 전달\n        yield put({ type: types.GET_LIST_DB_SUCCESS, payload: sheetsDataList}); \n\n    } catch (error) {\n        yield put({ type: types.GET_LIST_DB_FAIL, payload: '실패함'});\n    }\n};\n\n// 도서 추가 API 실행\nfunction* addBookSaga(params:any) {\n    try {\n        yield call(api.addBookSheet, params );\n        yield put({ type: types.GET_LIST_DB_REQUEST}); //추가 후, 변경된 시트 데이터 읽어오기\n    }\n    catch {\n        yield put({ type: types.ADD_BOOK_FAIL, payload:'failed'});\n    }\n}\n\n// 도서 대출/반납 시, 시트 내용 업데이트\nfunction* updateBookRentSaga(params:any) {\n    try {\n        yield call(api.updateBookRentInfo, params.payload);\n        yield put({ type: types.GET_LIST_DB_REQUEST});\n    } catch(err) {\n        yield put({ type: types.UPDATE_BOOK_RENT_FAIL, payload: err.message});\n    }\n    \n    \n}\n\nexport default function* watchBookSaga() {\n    // action 발생 시, saga 실행\n    yield takeLatest(types.GET_LIST_DB_REQUEST, getBookListDBSaga); \n    yield takeLatest(types.ADD_BOOK_REQUEST, addBookSaga); \n    yield takeLatest(types.UPDATE_BOOK_RENT_REQUEST, updateBookRentSaga);\n\n};","\n\nimport { call, put, takeLatest } from '@redux-saga/core/effects';\nimport * as types from '../types';\nimport * as apis from '../api';\nimport {userObjType} from 'propsTypes';\n\nfunction* loginUserSaga() {\n    try {\n        const response:userObjType = yield call(apis.googleLogin); // firebase google 로그인 시작\n        yield put({ type: types.LOGIN_SUCCESS, payload:response});\n        \n    } catch(error) {\n        yield put({type: types.LOGIN_FAIL, payload: error});\n    }\n}\n\nexport default function* watchLoginUser() {\n    yield takeLatest(types.LOGIN_REQUEST, loginUserSaga);\n}","import {  all, fork, call } from \"@redux-saga/core/effects\";\nimport bookSaga from \"./BookSaga\";\nimport userSaga from './UserSaga';\n\n// 액션 실행할 사가들을 봐주는 rootSaga\nfunction* rootSaga() {\n    yield all([call(userSaga), fork(bookSaga)]);\n}\n\nexport default rootSaga;\n","import rootReducer from 'modules/reducers';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport rootSaga from 'modules/sagas/index';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// create saga middleware\nconst sagaMiddleware = createSagaMiddleware(); \n\n// rootReducer 가져와 스토어 생성 후 리턴\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware)); //saga를 리덕스 미들웨어에 추가\n\n  sagaMiddleware.run(rootSaga); //루트사가 실행\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}